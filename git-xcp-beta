#!/bin/bash

function check_conflict {
	if $(git status --porcelain | grep UU); then
	    echo Repo was Confilcted.; exit 1
	fi
}
function check_clean {
	if [ -n "$(git ls-files --others --exclude-standard)" ]; then
		echo Repo was NOT Cleaned.; exit 1
	fi
}
tmp_stash_id="stash_id_tmp"
function get_tmp_stash_id {
	echo "$(git stash list | grep $tmp_stash_id | awk -F':' '{print $1}' | head -1)"
}
current_branch="$(git rev-parse --abbrev-ref HEAD)"
check_conflict
git stash save -u $tmp_stash_id
check_clean
git pull origin $current_branch
check_conflict
echo "# Cleaned. Now start tasks ..."



BUILD_NUM=$(agvtool what-version | tail -2 | xargs echo)
read  -rd '' BUILD_NUM <<< "$BUILD_NUM"

re='^[0-9]+$'
if ! [[ $BUILD_NUM =~ $re ]] ; then
   echo "error: Can't Extract build number. Maybe your project has not 'CURRENT_PROJECT_VERSION' key in plist." >&2; exit 1
fi

if [ "$1" == "--revert" ]; then
    echo "# Now revert : Build $BUILD_NUM ..."
    TAG=beta/b$BUILD_NUM
    last_commit_sha=$(git show-ref --heads --hash --tags "$TAG")
    if [ -z "$last_commit_sha" ]; then
    	echo "[!] Not found matched SHA via current build number"; exit 1
    fi
    git revert $last_commit_sha --no-edit
    git push origin $current_branch
    git fetch --tags
    git tag -d $TAG
    git push origin :refs/tags/$TAG

else
    if ! [ "$1" == "--exclude-new-buildnum" ]; then
        BUILD_NUM=$(agvtool next-version -all | tail -3 | awk 'NF{print $NF; exit}')
    fi
    
    echo "# Now deploy to origin : Build $BUILD_NUM"
    # push to origin
    git add -u
    git commit -m "[Build $BUILD_NUM - Beta]"
    $(git tag beta/b"$BUILD_NUM")
    git push -f origin "$current_branch":release-beta
    git push origin $current_branch
    $(git push origin beta/b"$BUILD_NUM")
fi


# undo stash
tmp_stash_id=$(get_tmp_stash_id)
if [ -n "$tmp_stash_id" ]; then
	if [ -n "$(git stash pop "$tmp_stash_id" --index | egrep "Dropped $tmp_stash_id")" ]; then
		echo "Restored working directory and index state succesfully."
	fi
fi
echo "# Done."
