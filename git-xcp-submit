#!/bin/bash

function get_plist_path {
	echo "# Retrieve a plist path for \"$1\" ..." 1>&2
	plist_path=$(/usr/bin/xcrun xcodebuild -showBuildSettings -target $1 2>/dev/null | grep "INFOPLIST_FILE" | sed 's/[ ]*INFOPLIST_FILE = //')
	if [ -z "$plist_path" ]; then
		echo "[!] Not found plist of given target. \"$1\"" 1>&2; exit 1; return 0;
	fi
	echo $plist_path
}
function check_conflict {
	if $(git status --porcelain | grep UU); then
	    echo Repo was Confilcted.; exit 1
	fi
}
function check_clean {
	if [ -n "$(git ls-files --others --exclude-standard)" ]; then
		echo Repo was NOT Cleaned.; exit 1
	fi
}
tmp_stash_id="stash_id_tmp"
function get_tmp_stash_id {
	echo "$(git stash list | grep $tmp_stash_id | awk -F':' '{print $1}' | head -1)"
}
current_branch="$(git rev-parse --abbrev-ref HEAD)"
check_conflict
git stash save -u $tmp_stash_id
check_clean
git pull origin $current_branch
check_conflict
echo "# Cleaned. Now start tasks ..."


TARGET=$1
plist_path=$(/usr/bin/xcrun xcodebuild -showBuildSettings -target $TARGET 2>/dev/null | grep "INFOPLIST_FILE" | sed 's/[ ]*INFOPLIST_FILE = //')
if [ -z "$plist_path" ]; then
	echo "[!] Not found plist of given target. $TARGET"; exit 1
fi

VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$plist_path")
BUILD_NUM=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$plist_path")
TARGET_TAG="$TARGET"/submit/"$VERSION"_b"$BUILD_NUM"
TARGET_BRANCH=release-submit-"$TARGET"
DEST_BRANCH_PATH="$current_branch":release-submit-"$TARGET"

if [ -n "git branch --list --all | grep remotes/origin | grep $TARGET_BRANCH" ]; then
	git branch $TARGET_BRANCH
fi

git push -f origin $DEST_BRANCH_PATH && git push origin $current_branch
git tag "$TARGET_TAG" && git push origin "$TARGET_TAG"


# undo stash
tmp_stash_id=$(get_tmp_stash_id)
if [ -n "$tmp_stash_id" ]; then
	if [ -n "$(git stash pop "$tmp_stash_id" --index | egrep "Dropped $tmp_stash_id")" ]; then
		echo "Restored working directory and index state succesfully."
	fi
fi
echo "# Done."
